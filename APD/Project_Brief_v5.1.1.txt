v5.1.1 (Next Session)

The Project Bible (Single Source of Truth)
Vision
A streamlined, state-driven web application for tracking workouts based on the "Will's 3-2-1" program. The app provides a clear, focused interface for logging sets, reps, and weight, with dynamic feedback on progress and upcoming exercises. It is a production-ready application with a robust, browser-native module system and a focus on performance, persistence, and accessibility.
Guiding Philosophies
SUPER STUPID SIMPLE (SSS): The user experience must be effortless and guided.
REMOVE, DON'T ADD: When faced with complexity, the first instinct should be to simplify or remove.
Core Features
Real-time Workout Dashboard: The active exercise card features a real-time clock, a dynamically calculated "Workout Completion Time" estimate, and a state-driven header ("Current Exercise" / "Next Exercise Up"). Upon completion, the UI seamlessly transitions to a dedicated "Workout Results" card with a celebratory animation.
Multi-Page Navigation: The app features "Home," "Workout," and "My Data" pages, with navigation managed by a central state property (appState.ui.currentPage).
Real-time, Persistent History: The "My Data" page features an interactive weekly calendar view of all workout history. Workout data is logged in real-time as sets are completed and is preserved across sessions via localStorage. A robust CSS Grid layout ensures pixel-perfect alignment of all log data.
Daily Persistence with Midnight Reset: The user's active session is automatically saved. After midnight, the session is cleared and correctly reset to the current day (preserving all user history), ensuring a fresh start each day.
Interactive App Header & Side Navigation: A persistent header contains navigation controls. The side navigation panel provides access to app-wide features, including a state-aware fullscreen toggle and a "Nuke Everything" option to completely reset all stored data.
Partner & Superset Modes: Advanced workout modes that allow two users or two body parts to be trained together, with interleaved exercise logs and distinct UI themes.
Interactive Workout Card: The main interface for the current exercise, featuring an advanced, dynamic input stepping system for dumbbell exercises. The card's layout is architecturally independent for each side in Superset/Partner modes, ensuring pixel-perfect alignment and preventing content on one side from affecting the other. The layout is static and predictable, with a guaranteed shift-free transition between all states (inactive, single-timer, and dual-timer).
Lazy-Loaded Video Integration: On-demand loading of the YouTube API to display exercise videos in an accessible, focus-trapped modal.
Accessibility & UX: All interactive elements (modals, side-nav) are fully accessible, trapping keyboard focus and making background content inert. The application uses a screen wake lock and can lock screen orientation to portrait mode.
Architectural Principles
State-Driven UI & Single Source of Truth (The Prime Directive): All UI components are a direct reflection of the application's central state (appState). The core development loop is Event -> Update State -> Re-render UI from State. This is non-negotiable.
Hyper-Explicit, Component-Centric Architecture: The application is built as a true JavaScript Module (ESM) system with a central Import Map in index.html to ensure robust, error-free module resolution. This is mirrored by a co-located, component-based CSS architecture. All feature files (JS, CSS, Templates) follow a `[component-name].[file-role].ext` naming convention for maximum clarity and are located directly within their feature's folder.
The "Rhythm & Flow" Layout System (New Gold Standard): All component layouts are governed by a token-based system that prioritizes predictable, systemic spacing over one-off rules. This is achieved through:
  - The "Grouped Stack" Pattern: Nested flexbox containers using the `.stack` primitive and the `gap` property to create isolated layout contexts for managing different spacing rhythms (e.g., 16px between groups, 7px within a group).
  - Optical Tuning: The use of `line-height: 0.7` on card headers to "shrink-wrap" the element's bounding box, eliminating invisible spacing and allowing for pixel-perfect layout control.
Definitive Card Layout Pattern: All card components follow a cemented architectural pattern where the outer `.card` is an unpadded frame. An inner `.card-content-container` is the sole authority for the card's visual inset (a `16px` "safe zone"), and the `.stack` layout primitive is applied within this container to manage the vertical rhythm of its contents.
Service-Oriented Architecture: Critical, regression-prone logic (Navigation, History, Persistence, Timers, Selectors, Clock, etc.) is isolated into dedicated, single-responsibility services.
Real-Time History Ledger: The historyService manages a real-time ledger of the user's workout. Sets are added or removed from the history as they are logged or cleared in the active session, with partner mode workouts correctly filtered to only save the primary user's data.